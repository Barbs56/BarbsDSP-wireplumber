# This example configuration file specifies loopback nodes that can be used
# to apply a role-based linking policy.
#
# The loopbacks are simply created by loading the libpipewire-module-loopback
# pipewire module with the appropriate options. You may also create these
# loopbacks in the pipewire daemon process by configuring them in pipewire.conf
# (using pipewire's syntax) instead of here.

wireplumber.profiles = {
  main = {
    policy.linking.role-based.loopbacks = required
  }
}

wireplumber.components.rules = [
  # This encodes common arguments and dependencies of the role loopbacks so that
  # we don't have to repeateadly write them on all instances below
  {
    matches = [
      {
        provides = "~loopback.sink.*"
      }
    ]
    actions = {
      merge = {
        arguments = {
          capture.props = {
            audio.position = [ FL, FR ]
            media.class = Audio/Sink
          }
          playback.props = {
            node.passive = true
          }
        }
        requires = [ support.export-core, pw.node-factory.adapter ]
      }
    }
  }
]

wireplumber.components = [
  {
    type = virtual, provides = policy.linking.role-based.loopbacks
    requires = [ loopback.sink.role.multimedia
                 loopback.sink.role.notification
                 loopback.sink.role.navigation
                 loopback.sink.role.assistant
                 loopback.sink.role.communication
                 loopback.sink.role.alert ]
  }
  {
    name = libpipewire-module-loopback, type = pw-module
    arguments = {
      node.name = "loopback.sink.role.multimedia"
      node.description = "Multimedia"
      capture.props = {
        device.intended-roles = [ "Music", "Movie", "Game", "Multimedia" ]
        policy.role-based.priority = 10
        policy.role-based.action.same-priority = "mix"
        policy.role-based.action.lower-priority = "mix"
      }
    }
    provides = loopback.sink.role.multimedia
  }
  {
    name = libpipewire-module-loopback, type = pw-module
    arguments = {
      node.name = "loopback.sink.role.notification"
      node.description = "System Notifications"
      capture.props = {
        device.intended-roles = [ "Notification" ]
        policy.role-based.priority = 20
        policy.role-based.action.same-priority = "mix"
        policy.role-based.action.lower-priority = "mix"
      }
    }
    provides = loopback.sink.role.notification
  }
  {
    name = libpipewire-module-loopback, type = pw-module
    arguments = {
      node.name = "loopback.sink.role.navigation"
      node.description = "Navigation"
      capture.props = {
        device.intended-roles = [ "Navigation", "GPS" ]
        policy.role-based.priority = 30
        policy.role-based.action.same-priority = "mix"
        policy.role-based.action.lower-priority = "duck"
      }
    }
    provides = loopback.sink.role.navigation
  }
  {
    name = libpipewire-module-loopback, type = pw-module
    arguments = {
      node.name = "loopback.sink.role.assistant"
      node.description = "Voice Assistant"
      capture.props = {
        device.intended-roles = [ "Assistant" ]
        policy.role-based.priority = 40
        policy.role-based.action.same-priority = "mix"
        policy.role-based.action.lower-priority = "cork"
      }
    }
    provides = loopback.sink.role.assistant
  }
  {
    name = libpipewire-module-loopback, type = pw-module
    arguments = {
      node.name = "loopback.sink.role.communication"
      node.description = "Communication"
      capture.props = {
        device.intended-roles = [ "Communication", "Phone" ]
        policy.role-based.priority = 50
        policy.role-based.action.same-priority = "mix"
        policy.role-based.action.lower-priority = "cork"
      }
    }
    provides = loopback.sink.role.communication
  }
  {
    name = libpipewire-module-loopback, type = pw-module
    arguments = {
      node.name = "loopback.sink.role.alert"
      node.description = "Alert"
      capture.props = {
        device.intended-roles = [ "Alert", "Emergency" ]
        policy.role-based.priority = 100
        policy.role-based.action.same-priority = "mix"
        policy.role-based.action.lower-priority = "cork"
      }
    }
    provides = loopback.sink.role.alert
  }
]
